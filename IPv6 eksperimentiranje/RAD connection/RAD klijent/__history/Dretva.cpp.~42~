//---------------------------------------------------------------------------

#pragma hdrstop

#include "Dretva.h"
#include "Klijent.h"

//---------------------------------------------------------------------------
USEFORM("Klijent.cpp", Form2);
//---------------------------------------------------------------------------
#pragma package(smart_init)
__fastcall Dretva::Dretva(TForm2* f, SOCKET s)
{
	form = f;
	recvbufferlen=1024;
	ispis = new WCHAR[recvbufferlen];
	recvbuffer = new char[recvbufferlen];
	primljeno = new wchar_t[recvbufferlen];
	server = s;
}

__fastcall Dretva::~Dretva()
{
	delete[] ispis;
	delete[] recvbuffer;
	delete[] primljeno;
}

void __fastcall Dretva::Execute()
{
	int readed=0;
	DWORD exitCode;
	//InterlockedExchange(&dStop,0);
	dStop=0;
	wsprintf(ispis,L"Dretva zapoèinje.");
	Synchronize(Ispisi);
	while(dStop==0 && readed!=(-1))
	{
		ZeroMemory(recvbuffer,recvbufferlen);
		ZeroMemory(primljeno, recvbufferlen);
		readed=recv(server,recvbuffer,recvbufferlen,0);
		if(readed>0)
		{
			mbstowcs(primljeno,recvbuffer, recvbufferlen);
			wsprintf(ispis,L"Primljeno: %s",primljeno);
			Synchronize(Ispisi);
		}
	}
	wsprintf(ispis,L"Dretva završava.");
	Synchronize(Ispisi);
	dStop=0;
	GetExitCodeProcess(form->ProcessInfo.hProcess, &exitCode);
	wsprintf(ispis,L"Kod procesa: %d",exitCode);
	Synchronize(Ispisi);
	if(exitCode!=STILL_ACTIVE)
	{
		wsprintf(ispis,L"Ugašen je serverski proces.");
		Synchronize(Ispisi);
		Synchronize(PokreniProces);
	}
}


void __fastcall Dretva::Stop()
{
	InterlockedIncrement(&dStop);
	closesocket(server);
	this->WaitFor();

}

void __fastcall Dretva::Ispisi()
{
	if(ispis!=NULL)
		form->memIspis->Lines->Add(ispis);

}

void __fastcall Dretva::OsvjeziProces(DWORD exitCode)
{
 	form->Button1->Enabled=true;
	form->Button2->Enabled=false;
	form->PokreniServer();
}


